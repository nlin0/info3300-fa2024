<html>

<head>
  <title>INFO 3300 - September 9</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>

  <!--- D3 IMPORT HERE --->
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <!--- D3 IMPORT HERE --->

  <style>
    .hellodiv {
      padding: 10px;
      margin: 20px;
    }
  </style>

</head>

<body>
  <div class="container larger">
    <h3>Notes for September 9</h3>

    <p>
      Execute a <tt>git pull</tt> in your repository directory to download new files. Prompt files won't change after
      posting, so feel free to modify them as you like. Here once again is an <a
        href="http://rogerdudler.github.io/git-guide/">informal guide to git</a>.
    </p>

    <p>
      To develop efficiently, have a local web server running. Python has a simple, built-in server. Use <tt>python -m
        http.server</tt> for python 3; use <tt>python -m SimpleHTTPServer 8000</tt> for python 2 (execute python in cmd
      for version number).
    </p>

    <p>
      <a href="https://d3js.org/">D3</a> is a library that makes it easy to create and manipulate page elements. It's
      not restricted to SVG elements, but that's what we'll usually use it for. We'll start by using d3 to select DOM
      elements, create new elements, and modify the content and appearance of elements.
    </p>
    <p>
      You can find a bunch of D3 examples <a href="https://github.com/d3/d3/wiki/Gallery">here</a> and access <a
        href="https://github.com/d3/d3/blob/master/API.md">D3's online API reference</a>.
    </p>
    <p>
      <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors">Here</a> is a short guide
      on CSS selectors, which D3 uses for its "select" and "selectAll" functions.
    </p>

    <h5>HTML for today:</h5>

    <div id="d1" class="hellodiv">Hello: DIV-1</div>
    <div id="d2" class="hellodiv">Hello: DIV-2</div>
    <div id="d3" class="hellodiv">Hello: DIV-3</div>

    <svg height="250" width="250" style="background: black">
      <!--- We're going to be populating this dynamically today --->
    </svg>


    <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
    <h5>Code for today:</h5>
    <pre>
    <code id="display" class="hljs language-javascript">
    </code>
  </pre>

    <!--- Code for today's class --->
    <script id="notes">

      // New import! (see <head> of document)
      // console.log(d3)



      // 1. How can we select elements? What is the difference between select() and selectAll()?
      // OLD WAY OF DOING THINGS
      // let div1 = document.getElementById('d3');
      // console.log(div1);
      // div.innerHTML = "testing";
      // div1.style.color = "red";

      // NEW WAY OF DOING THINGS
      let d3div1 = d3.select("#d1")
      console.log(d3div1)
      // Vn {_groups: Array(1), _parents: Array(1)
      d3div1.text("Isn't d3 amazing")
      d3div1.style("color", "red")
      console.log(d3div1.text())
      // we just get back the text
      console.log(d3div1.style("color", "blue"))
      // we just get back the color... and 

      // stylistically, chianing looks like this:
      d3div1.text("Isn't chaining amazing")
        .style("background-color", "black")
        .style("color", "aquamarine")


      // SELECTING MORE DIVS
      let divs = d3.selectAll("div.hellodiv") // can also just do .hellodiv
      divs.style("font-family", "Wingdings");

      // there is no need for a let!
      d3.selectAll("div.hellodiv")
        .style("background-color", "black")
        .style("color", "aquamarine")


      // 2a. How can we create new elements, and set their attributes and styles?

      let svg = d3.select("svg");
      console.log(svg);

      svg.append("circle")
        .attr("r", 10) // radius
        .attr("cx", 100) // where on canvas
        .attr("cy", 100) // where on canvas
        .style("fill", "red")
        .on("click", function () { console.log("Circles are the best shape") })


      // 2b. How do we create lots of elements (but not using data just yet)?
      let colors = ["yellow", "blue", "pink", "green", "purple"];

      // class given function:
      function randomPixel() {
        return Math.random() * svg.attr("height");
      }
      // class iven function:
      function randomColor() {
        return colors[Math.floor(Math.random() * colors.length)]
      }

      for (let i = 0; i < 1000; i++) {
        let x = randomPixel()
        let y = randomPixel()

        svg.append("circle")
          .attr("r", 4) // radius
          .attr("cx", x) // where on canvas
          .attr("cy", y) // where on canvas
          .style("fill", randomColor())
      }

      // more often JS style loop

      // another way of saying function (d,i)
      // d is color, i is number
      colors.forEach((d, i) => {
        console.log(d, i);

        // 10 and 25
        let rad = Math.floor(10 + (Math.random() * 15));

        svg.append("circle")
          .attr("r", rad) // radius
          .attr("cx", randomPixel()) // where on canvas
          .attr("cy", randomPixel()) // where on canvas
          .style("fill", d)
      })

      // can change all the cirlce colors
      d3.selectAll("circle").style("fill", "red")
      // can also take in a function
      d3.selectAll("circle").style("fill", () => { return "blue" })


      // 3. How do we update the attributes of existing elements?
      d3.selectAll("circle")
        // before transition is not animated
        .transition() // everything after transition is animated 
        // animation happens
        .delay(1000) // in milliseconds.. wait 1 second before starting
        .duration(500) // take .5 seconds to  change
        .style("fill", () => { return randomColor(); });
      // this means that all are the random color ^ means each is random color
      // .style("fill", randomColor());

      d3.selectAll("circle")
        .transition()
        .delay(1600) // delay it longer than previous so they won't battle
        .duration(500)
        .attr("r", "20");

      d3.selectAll("circle")
        .transition()
        .delay(2200) // delay it longer than previous so they won't battle
        .duration(1000)
        .attr("cx", () => { return randomPixel(); })
        .attr("cy", () => { return randomPixel(); });
      // remember to use function to change each pixel

      //d3 does tweening "in betweening".. special tweening that converts slowly over time from one variable to the other
    </script>



    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>

      function sanitize(s) {
        return s.replace("<br>", "\\n")
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          .replace(/"/g, "&quot;")
          .replace(/'/g, "&#039;");
      }
      document.getElementById("display").innerHTML = sanitize(document.getElementById("notes").innerText);
      hljs.highlightAll();
    </script>

  </div>
</body>

</html>